{"version":3,"sources":["store/cards/types.ts","components/cards-selector/cards-selector-card/index.tsx","components/cards-selector/cards-selector-card-placeholder/index.tsx","components/cards-selector/cards-selector-cards-section/index.tsx","store/cards/actions.ts","components/cards-selector/index.tsx","App.tsx","serviceWorker.ts","store/cards/reducers.ts","store/cards/initial-cards.ts","store/index.ts","index.tsx"],"names":["CardType","CardsSelectorCardStyled","withStyles","card","width","height","border","borderColor","cardTitle","borderBottom","cardDescription","overflow","props","cardStyles","useDrag","item","type","toString","collect","monitor","opacity","isDragging","dragRef","military","Military","econimics","Economics","diplomace","Diplomacy","wildcard","Wildcard","Grid","container","wrap","direction","ref","style","className","classNames","classes","name","description","CardsSelectorCardPlaceholderStyled","mapDispatchToProps","changeCard","newCard","CardsSelectorCardsSectionStyled","connect","state","cards","root","minHeight","cardsList","flexGrow","margin","useDrop","accept","Object","keys","drop","isUnassignedSection","isAssigned","isOver","canDrop","dropRef","selectedCards","filter","c","map","availableSlots","freeSlots","length","i","push","cardsSectionTitle","Typography","title","cardsContainerClassName","CardsSelectorStyled","cardSection","justifyContent","justify","xs","App","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","targetCardIndex","findIndex","splice","store","createStore","ReactDOM","render","backend","HTML5Backend","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLAmBYA,E,yEAAAA,O,uBAAAA,I,yBAAAA,I,yBAAAA,I,wBAAAA,M,iEC+CNC,EAA0BC,YA3DjB,CACbC,KAAM,CACJC,MAAO,IACPC,OAAQ,IACRC,OAAQ,YACR,aAAc,CACZC,YAAa,OAEf,cAAe,CACbA,YAAa,UAEf,aAAc,CACZA,YAAa,SAEf,aAAc,CACZA,YAAa,WAGjBC,UAAW,CACTC,aAAc,mBAEhBC,gBAAiB,CACfC,SAAU,WAqCkBT,EA3BN,SAACU,GAAkB,IAQvCC,EARsC,EACbC,YAAQ,CACnCC,KAAM,CAAEC,KAAMJ,EAAMT,KAAKa,KAAKC,WAAYd,KAAMS,EAAMT,MACtDe,QAAS,SAAAC,GAAO,MAAK,CACnBC,QAASD,EAAQE,WAAa,EAAI,OAJI,mBAClCD,EADkC,KAClCA,QAAUE,EADwB,KAgB1C,OAPAT,EAAaD,EAAMT,KAAO,CACxBoB,SAAUX,EAAMT,KAAKa,OAAShB,EAASwB,SACvCC,UAAWb,EAAMT,KAAKa,OAAShB,EAAS0B,UACxCC,UAAWf,EAAMT,KAAKa,OAAShB,EAAS4B,UACxCC,SAAUjB,EAAMT,KAAKa,OAAShB,EAAS8B,UACrC,KAGFlB,EAAMT,KACN,kBAAC4B,EAAA,EAAD,CAAMC,WAAS,EAACC,KAAK,SAASC,UAAU,SAASC,IAAKb,EAASc,MAAO,CAAChB,WAAUiB,UAAWC,IAAW1B,EAAM2B,QAAQpC,KAAMS,EAAMyB,UAAWxB,IAC1I,yBAAKwB,UAAWzB,EAAM2B,QAAQ/B,WAAaI,EAAMT,KAAKqC,MACtD,yBAAKH,UAAWzB,EAAM2B,QAAQ7B,iBAAmBE,EAAMT,KAAKsC,cAE9D,kBAACV,EAAA,EAAD,CAAMC,WAAS,EAACK,UAAWzB,EAAM2B,QAAQpC,UCrCvCuC,EAAqCxC,YAnB5B,CACbC,KAAM,CACJC,MAAO,IACPC,OAAQ,IACRC,OAAQ,oBAe+BJ,EANN,SAACU,GACpC,OACE,kBAACmB,EAAA,EAAD,CAAMM,UAAWC,IAAW1B,EAAM2B,QAAQpC,KAAMS,EAAMyB,gB,yjBCP1D,IA+EMM,EAAqB,CACzBC,WC3F8B,SAACzC,EAAY0C,GAAb,MAAkD,CAChF7B,KJHyB,cIIzBb,OACA0C,aD2FIC,EAAkCC,aARhB,SAACC,GAAD,MAAsB,CAC5CC,MAAOD,EAAMC,MAAMA,SAO4CN,EAAzBI,CAA6C7C,YAnFtE,CACbgD,KAAM,CACJC,UAAW,IACX7C,OAAQ,mBAEV8C,UAAW,CACTC,SAAU,EACVC,OAAQ,IAEVnD,KAAM,CACJmD,OAAQ,QAyEyEpD,EA1DnD,SAACU,GAAkB,IAAD,EACb2C,YAAQ,CAC3CC,OAAQC,OAAOC,KAAK1D,GACpB2D,KAAM,SAAC5C,GACL,IAAI8B,EAOFA,EALGjC,EAAMgD,qBAAqC,MAAdhD,EAAMI,MAAgBJ,EAAMI,OAASD,EAAKZ,KAAKa,KAKxE,KAAQD,EAAKZ,KAAb,CAAmB0D,YAAY,IAH/B,KAAQ9C,EAAKZ,KAAb,CAAmB0D,YAAY,IAMxCjD,EAAMgC,WAAW7B,EAAKZ,KAAM0C,IAE9B3B,QAAS,SAAAC,GAAO,MAAK,CACnB2C,OAAQ3C,EAAQ2C,SAChBC,QAAS5C,EAAQ4C,cAlB6B,0BACxBC,GADwB,EAC1CF,OAD0C,EAClCC,QADkC,MAsB5CE,EAAgBrD,EAAMqC,MAAMiB,QAAO,SAAAC,GAAC,OAAIvD,EAAMgD,sBAAwC,IAAjBO,EAAEN,YAAwBM,EAAEnD,OAASJ,EAAMI,OAAyB,IAAjBmD,EAAEN,cAAqBO,KAAI,SAAAD,GAAC,OACxJ,kBAAC,EAAD,CAAmB9B,UAAWzB,EAAM2B,QAAQpC,KAAMA,KAAMgE,OAG1D,GAAIvD,EAAMyD,eAGR,IAFA,IAAMC,EAAY1D,EAAMyD,eAAiBJ,EAAcM,OAE9CC,EAAE,EAAGA,EAAEF,EAAWE,IACzBP,EAAcQ,KACZ,kBAAC,EAAD,CAA8BpC,UAAWzB,EAAM2B,QAAQpC,QAK7D,OACE,kBAAC4B,EAAA,EAAD,CAAMC,WAAS,EAACE,UAAU,SAASD,KAAK,SAASI,UAAWC,IAAW1B,EAAM2B,QAAQW,MAAOf,IAAK6B,GAC/F,yBAAK3B,UAAWzB,EAAM2B,QAAQmC,mBAC5B,kBAACC,EAAA,EAAD,KAAc/D,EAAMgE,QAEtB,kBAAC7C,EAAA,EAAD,CAAMC,WAAS,EAACK,UAAWC,IAAW1B,EAAM2B,QAAQa,UAAWxC,EAAMiE,0BAEjEZ,QE1BJa,EAAsB/B,aAJJ,SAACC,GAAD,MAAsB,CAC5CC,MAAOD,EAAMC,MAAMA,SAGOF,CAAyB7C,YA9CtC,CACbgD,KAAM,CACJC,UAAW,KAEb4B,YAAa,CACXC,eAAgB,WAyCiC9E,EAhC/B,SAACU,GACrB,OACE,kBAACmB,EAAA,EAAD,CAAMM,UAAWzB,EAAM2B,QAAQW,KAAMlB,WAAS,EAACiD,QAAQ,UACrD,kBAAClD,EAAA,EAAD,CAAMhB,MAAI,EAACiB,WAAS,EAACE,UAAU,SAASgD,GAAI,GAC1C,kBAACnD,EAAA,EAAD,CAAMhB,MAAI,GACR,kBAAC,EAAD,CAA2B8D,wBAAyBjE,EAAM2B,QAAQwC,YAAaV,eAAgB,EAAGO,MAAM,WAAW5D,KAAMhB,EAASwB,YAGpI,kBAACO,EAAA,EAAD,CAAMhB,MAAI,GACR,kBAAC,EAAD,CAA2B8D,wBAAyBjE,EAAM2B,QAAQwC,YAAaV,eAAgB,EAAGO,MAAM,YAAY5D,KAAMhB,EAAS0B,aAGrI,kBAACK,EAAA,EAAD,CAAMhB,MAAI,GACR,kBAAC,EAAD,CAA2B8D,wBAAyBjE,EAAM2B,QAAQwC,YAAaV,eAAgB,EAAGO,MAAM,YAAY5D,KAAMhB,EAAS4B,aAGrI,kBAACG,EAAA,EAAD,CAAMhB,MAAI,GACR,kBAAC,EAAD,CAA2B8D,wBAAyBjE,EAAM2B,QAAQwC,YAAaV,eAAgB,EAAGO,MAAM,YAAY5D,KAAMhB,EAAS8B,aAIrI,kBAACC,EAAA,EAAD,CAAMhB,MAAI,EAACmE,GAAI,GACb,kBAAC,EAAD,CAA2BN,MAAM,YAAYhB,qBAAqB,UClC7DuB,EANO,WACpB,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,okBCfN,IAAMC,EAA2B,CAC/BxC,MCFkC,CAClC,CACEjC,KAAMhB,EAASwB,SACfgB,KAAM,sBACNC,YAAa,4EACboB,YAAY,GAEd,CACE7C,KAAMhB,EAAS0B,UACfc,KAAM,YACNC,YAAa,2DACboB,YAAY,GAEd,CACE7C,KAAMhB,EAAS0B,UACfc,KAAM,gBACNC,YAAa,2FACboB,YAAY,GAEd,CACE7C,KAAMhB,EAAS0B,UACfc,KAAM,iBACNC,YAAa,uJACboB,YAAY,GAEd,CACE7C,KAAMhB,EAAS4B,UACfY,KAAM,eACNC,YAAa,0GACboB,YAAY,GAEd,CACE7C,KAAMhB,EAAS8B,SACfU,KAAM,oBACNC,YAAa,mFACboB,YAAY,GAEd,CACE7C,KAAMhB,EAAS8B,SACfU,KAAM,gBACNC,YAAa,oCACboB,YAAY,KCxCH6B,EAAcC,YAAgB,CACzC1C,MFG0B,WAAyE,IAAxED,EAAuE,uDAAnDyC,EAAcG,EAAqC,uCAClG,OAAQA,EAAO5E,MACb,IRTuB,cQUrB,IAAI6E,EAAkB7C,EAAMC,MAAM6C,WAAU,SAAA3B,GAAC,OAAIA,IAAMyB,EAAOzF,QAM9D,OAJI0F,GAAmB,GACrB7C,EAAMC,MAAM8C,OAAOF,EAAiB,EAApC,KAA4C7C,EAAMC,MAAM4C,GAAxD,GAA6ED,EAAO/C,UAG/EG,EACT,QACE,OAAOA,M,QGPPgD,EAAQC,YAAYP,GAE1BQ,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,IAAD,CAAaI,QAASC,KACpB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SJsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3f097e3f.chunk.js","sourcesContent":["export const CHANGE_CARD = 'CHANGE_CARD';\r\n\r\nexport interface ChangeCardAction {\r\n  type: typeof CHANGE_CARD,\r\n  card: Card,\r\n  newCard: Card\r\n}\r\n\r\nexport interface CardsState {\r\n  cards: Card[];\r\n}\r\n\r\nexport interface Card {\r\n  type: CardType;\r\n  name: string;\r\n  description: string;\r\n  isAssigned: boolean\r\n}\r\n\r\nexport enum CardType {\r\n  Military,\r\n  Economics,\r\n  Diplomacy,\r\n  Wildcard\r\n}\r\n\r\nexport type CardsActions = ChangeCardAction;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Card, CardType } from '../../../store/cards/types';\r\nimport { useDrag } from 'react-dnd';\r\nimport classNames from 'classnames';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst styles = { \r\n  card: {\r\n    width: 125,\r\n    height: 150,\r\n    border: '2px solid',\r\n    '&.military': {\r\n      borderColor: 'red'\r\n    },\r\n    '&.econimics': {\r\n      borderColor: 'yellow'\r\n    },\r\n    '&.iplomacy': {\r\n      borderColor: 'green'\r\n    },\r\n    '&.wildcard': {\r\n      borderColor: 'purple'\r\n    }\r\n  },\r\n  cardTitle: {\r\n    borderBottom: '1px solid black'\r\n  },\r\n  cardDescription: {\r\n    overflow: 'hidden'\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  classes: any;\r\n  card: Card;\r\n  className?: any;\r\n}\r\n\r\nconst CardsSelectorCard = (props: Props) => {\r\n  const [{opacity}, dragRef] = useDrag({\r\n    item: { type: props.card.type.toString(), card: props.card },\r\n    collect: monitor => ({\r\n      opacity: monitor.isDragging ? 1 : 0.4\r\n    })\r\n  });\r\n\r\n  let cardStyles;\r\n  cardStyles = props.card ? {\r\n    military: props.card.type === CardType.Military,\r\n    econimics: props.card.type === CardType.Economics,\r\n    diplomace: props.card.type === CardType.Diplomacy,\r\n    wildcard: props.card.type === CardType.Wildcard\r\n  } : null\r\n\r\n  return (\r\n    props.card ?\r\n    <Grid container wrap=\"nowrap\" direction=\"column\" ref={dragRef} style={{opacity}} className={classNames(props.classes.card, props.className, cardStyles)}>\r\n      <div className={props.classes.cardTitle}>{ props.card.name }</div>\r\n      <div className={props.classes.cardDescription}>{ props.card.description }</div>\r\n    </Grid> :\r\n    <Grid container className={props.classes.card}>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst CardsSelectorCardStyled = withStyles(styles)(CardsSelectorCard);\r\n\r\nexport { CardsSelectorCardStyled as CardsSelectorCard }","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport classNames from 'classnames';\r\n\r\nconst styles = { \r\n  card: {\r\n    width: 125,\r\n    height: 150,\r\n    border: '2px solid black'\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  classes: any;\r\n  className?: any\r\n}\r\n\r\nconst CardsSelectorCardPlaceholder = (props: Props) => {\r\n  return (\r\n    <Grid className={classNames(props.classes.card, props.className)}></Grid>\r\n  )\r\n}\r\n\r\nconst CardsSelectorCardPlaceholderStyled = withStyles(styles)(CardsSelectorCardPlaceholder);\r\n\r\nexport { CardsSelectorCardPlaceholderStyled as CardsSelectorCardPlaceholder }","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography, Grid } from '@material-ui/core';\r\nimport { CardType, Card } from '../../../store/cards/types';\r\nimport { AppState } from '../../../store';\r\nimport { connect } from 'react-redux';\r\nimport { useDrop } from 'react-dnd';\r\nimport { TargetType, Identifier } from 'dnd-core';\r\nimport { CardsSelectorCard } from '../cards-selector-card';\r\nimport { changeCardAction } from '../../../store/cards/actions';\r\nimport classNames from 'classnames';\r\nimport { CardsSelectorCardPlaceholder } from '../cards-selector-card-placeholder';\r\n\r\nconst styles = { \r\n  root: {\r\n    minHeight: 210,\r\n    border: '1px solid black',\r\n  },\r\n  cardsList: {\r\n    flexGrow: 1,\r\n    margin: 10\r\n  },\r\n  card: {\r\n    margin: '5px'\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  classes: any;\r\n  cards: Card[];\r\n  type?: CardType;\r\n  title: string;\r\n  changeCard: typeof changeCardAction;\r\n  isUnassignedSection?: boolean;\r\n  availableSlots?: number;\r\n  cardsContainerClassName?: any;\r\n}\r\n\r\nconst CardsSelectorCardsSection = (props: Props) => {\r\n  const [{isOver, canDrop}, dropRef] = useDrop({\r\n    accept: Object.keys(CardType),\r\n    drop: (item: { type: string, card: Card }) => {\r\n      let newCard: Card;\r\n\r\n      if (!props.isUnassignedSection && props.type != null && props.type === item.card.type) {\r\n        // Если скидываем карточку из общего раздела в соответствующий раздел\r\n        newCard = { ...item.card, isAssigned: true }\r\n      } else {\r\n        // Если из специфичного отдела куда-либо еще\r\n        newCard = { ...item.card, isAssigned: false }\r\n      }\r\n\r\n      props.changeCard(item.card, newCard);\r\n    },\r\n    collect: monitor => ({\r\n      isOver: monitor.isOver(),\r\n      canDrop: monitor.canDrop()\r\n    })\r\n  })\r\n\r\n  const selectedCards = props.cards.filter(c => props.isUnassignedSection && c.isAssigned === false || c.type === props.type && c.isAssigned === true).map(c =>\r\n    <CardsSelectorCard className={props.classes.card} card={c} />\r\n  );\r\n\r\n  if (props.availableSlots) {\r\n    const freeSlots = props.availableSlots - selectedCards.length;\r\n\r\n    for (let i=0; i<freeSlots; i++) {\r\n      selectedCards.push(\r\n        <CardsSelectorCardPlaceholder className={props.classes.card} />\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid container direction=\"column\" wrap=\"nowrap\" className={classNames(props.classes.root)} ref={dropRef}>\r\n      <div className={props.classes.cardsSectionTitle}>\r\n        <Typography>{ props.title }</Typography>\r\n      </div>\r\n      <Grid container className={classNames(props.classes.cardsList, props.cardsContainerClassName)}>\r\n        {\r\n          selectedCards\r\n        }\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  cards: state.cards.cards\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  changeCard: changeCardAction\r\n}\r\n\r\nconst CardsSelectorCardsSectionStyled = connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(CardsSelectorCardsSection));\r\n\r\nexport { CardsSelectorCardsSectionStyled as CardsSelectorCardsSection }","import { ChangeCardAction, Card, CardType, CHANGE_CARD } from \"./types\";\r\n\r\nexport const changeCardAction = (card: Card, newCard: Card): ChangeCardAction => ({\r\n  type: CHANGE_CARD,\r\n  card,\r\n  newCard\r\n});","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { Card, CardType } from '../../store/cards/types';\r\nimport { AppState } from '../../store';\r\nimport { connect } from 'react-redux';\r\nimport { CardsSelectorCard } from './cards-selector-card';\r\nimport { CardsSelectorCardsSection } from './cards-selector-cards-section';\r\n\r\nconst styles = { \r\n  root: {\r\n    minHeight: 400\r\n  },\r\n  cardSection: {\r\n    justifyContent: 'center'\r\n  }\r\n}\r\n\r\ninterface Props {\r\n  classes: any;\r\n  cards: Card[];\r\n}\r\n\r\nconst CardsSelector = (props: Props) => {\r\n  return (\r\n    <Grid className={props.classes.root} container justify=\"center\">\r\n      <Grid item container direction=\"column\" xs={4}>\r\n        <Grid item>\r\n          <CardsSelectorCardsSection cardsContainerClassName={props.classes.cardSection} availableSlots={1} title=\"Military\" type={CardType.Military} />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <CardsSelectorCardsSection cardsContainerClassName={props.classes.cardSection} availableSlots={3} title=\"Economics\" type={CardType.Economics} />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <CardsSelectorCardsSection cardsContainerClassName={props.classes.cardSection} availableSlots={1} title=\"Diplomacy\" type={CardType.Diplomacy} />\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <CardsSelectorCardsSection cardsContainerClassName={props.classes.cardSection} availableSlots={2} title=\"Wildcards\" type={CardType.Wildcard} />\r\n        </Grid>\r\n      </Grid>\r\n\r\n        <Grid item xs={6}>\r\n          <CardsSelectorCardsSection title=\"All cards\" isUnassignedSection={true} />\r\n        </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => ({\r\n  cards: state.cards.cards\r\n});\r\n\r\nconst CardsSelectorStyled = connect(mapStateToProps)(withStyles(styles)(CardsSelector));\r\n\r\nexport { CardsSelectorStyled as CardsSelector }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { CardsSelector } from './components/cards-selector';\n\nconst App: React.FC = () => {\n  return (\n    <CardsSelector />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CardsState, CardsActions, CHANGE_CARD } from \"./types\";\r\nimport { initialCards } from \"./initial-cards\";\r\n\r\nconst initialState: CardsState = {\r\n  cards: initialCards\r\n}\r\n\r\nexport const cardsReducer = (state: CardsState = initialState, action: CardsActions): CardsState => {\r\n  switch (action.type) {\r\n    case CHANGE_CARD:\r\n      let targetCardIndex = state.cards.findIndex(c => c === action.card);\r\n\r\n      if (targetCardIndex >= 0) {\r\n        state.cards.splice(targetCardIndex, 1, { ...state.cards[targetCardIndex], ...action.newCard });\r\n      }\r\n\r\n      return state;\r\n    default:\r\n      return state;\r\n  }\r\n}","import { Card, CardType } from \"./types\";\r\n\r\nexport const initialCards: Card[] = [\r\n  {\r\n    type: CardType.Military,\r\n    name: 'Strategic Air Force',\r\n    description: '+50% Prodution toward information era air units, and toward all Carriers.',\r\n    isAssigned: false\r\n  },\r\n  {\r\n    type: CardType.Economics,\r\n    name: 'Ecommerce',\r\n    description: '+2 Production and +5 Gold for international Trade Routes',\r\n    isAssigned: false\r\n  },\r\n  {\r\n    type: CardType.Economics,\r\n    name: 'Publick Works',\r\n    description: '+30% Production toward Builders, and newely trained Builders gain 2 extra build actions.',\r\n    isAssigned: false\r\n  },\r\n  {\r\n    type: CardType.Economics,\r\n    name: 'Market Economy',\r\n    description: 'Your international Trade Routes provide +1 Gold per Luxury and Strategic resource improved at the destination, as well as +2 Culture and +2 Science.',\r\n    isAssigned: false\r\n  },\r\n  {\r\n    type: CardType.Diplomacy,\r\n    name: 'Containtment',\r\n    description: 'Each Envoy you send to a city-state counts as two, if its Suzerain has a different government than you.',\r\n    isAssigned: false\r\n  },\r\n  {\r\n    type: CardType.Wildcard,\r\n    name: 'Oligarchic Legacy',\r\n    description: 'All land melee, anti-cavalry and naval melee class units gain +4 Combat Strength',\r\n    isAssigned: false\r\n  },\r\n  {\r\n    type: CardType.Wildcard,\r\n    name: 'Laisezz-Faire',\r\n    description: '+4 Great Merchant points per turn',\r\n    isAssigned: false\r\n  }\r\n]","import { combineReducers } from 'redux'\r\nimport { cardsReducer } from './cards/reducers';\r\n\r\nexport const rootReducer = combineReducers({\r\n  cards: cardsReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { rootReducer } from './store';\nimport { Provider } from 'react-redux';\nimport { DndProvider } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}